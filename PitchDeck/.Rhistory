library(AppliedPredictiveModeling)
data(solubility)
library(shiny)
library(caret)
library(nnet)
correlated<-findCorrelation(cor(solTrainXtrans),cutoff=.75)
trainingData<-solTrainXtrans[,-correlated]
testingData<-solTestXtrans[, correlated]
set.seed(2)
lmTrainingData<-trainingData
lmTrainingData$Solubility<-solTrainY
lmFit<-lm(Solubility ~ .,data = lmTrainingData)
lmPred<-predict(lmFit, testingData)
lmValues<-data.frame(obs=solTestY, pred=lmPred)
lmSummary<-defaultSummary(lmValues)
lmRMSE<-lmSummary[1]
lmRSquared<-lmSummary[2]
correlated<-findCorrelation(cor(solTrainXtrans),cutoff=.75)
trainingData<-solTrainXtrans[,-correlated]
testingData<-solTestXtrans[, -correlated]
set.seed(2)
lmTrainingData<-trainingData
lmTrainingData$Solubility<-solTrainY
lmFit<-lm(Solubility ~ .,data = lmTrainingData)
lmPred<-predict(lmFit, testingData)
lmValues<-data.frame(obs=solTestY, pred=lmPred)
lmSummary<-defaultSummary(lmValues)
lmRMSE<-lmSummary[1]
lmRSquared<-lmSummary[2]
singleNnetFit<-nnet(trainingData, testingData, size = 5, decay = 0.01,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = 5 * (ncol(trainingData) + 1) + 5 + 1)
singleNnetFit<-nnet(trainingData, solTrainY, size = 5, decay = 0.01,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = 5 * (ncol(trainingData) + 1) + 5 + 1)
nnetPred1<-predict(nnetFitAll, testXnnet)
nnetValues1<-data.frame(obs=solTestY, pred=nnetPred1)
nnetPred1<-predict(nnetFit, testingData)
nnetPred1<-predict(singleNnetFit, testingData)
nnetValues1<-data.frame(obs=solTestY, pred=nnetPred1)
nnetSummary<-defaultSummary(nnetValues1)
nnetRMSE<-nnetSummary[1]
nnetRSquared<-nnetSummary[2]
avgNnetFit<-avNNet(trainingData, solTrainY, size = 5, decay = 0.01, repeats = 5
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = 5 * (ncol(trainingData) + 1) + 5 + 1)
?avNNet
avgNnetFit<-avNNet(trainingData, solTrainY, size = 5, decay = 0.01, repeats = 5,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = 5 * (ncol(trainingData) + 1) + 5 + 1)
nnetPred1<-predict(avgNnetFit, testingData)
nnetValues1<-data.frame(obs=solTestY, pred=nnetPred1)
nnetSummary<-defaultSummary(nnetValues1)
nnetRMSE<-nnetSummary[1]
nnetRSquared<-nnetSummary[2]
runApp()
library(AppliedPredictiveModeling)
data(solubility)
library(shiny)
library(caret)
library(nnet)
#remove correlated predictors
correlated<-findCorrelation(cor(solTrainXtrans),cutoff=.75)
trainingData<-solTrainXtrans[,-correlated]
testingData<-solTestXtrans[, -correlated]
# get the RMSE and Rsquared for an lm model of the box-cox transformed parameters
# these are the baseline values against which the nnet model will be evaluated
set.seed(2)
lmTrainingData<-trainingData
lmTrainingData$Solubility<-solTrainY
lmFit<-lm(Solubility ~ .,data = lmTrainingData)
lmPred<-predict(lmFit, testingData)
lmSummary<-defaultSummary(data.frame(obs=solTestY, pred=lmPred))
lmRMSE<-lmSummary[1]
lmRSquared<-lmSummary[2]
# place functions for computed outputs above server
nnSingle<-function(inputNumHiddenNodes, inputDecay) {
singleNnetFit<-nnet(trainingData, solTrainY, size = inputNumHiddenNodes, decay = inputDecay,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = inputNumHiddenNodes * (ncol(trainingData) + 1) + inputNumHiddenNodes + 1)
singleNnetPred<-predict(singleNnetFit, testingData)
singleNnetSummary<-defaultSummary(data.frame(obs=solTestY, pred=singelNnetPred))
singleNnetRMSE<- singleNnetSummary[1]
singleNnetRSquared<-singleNnetSummary[2]
}
nnAverage<-function(inputNumHiddenNodes, inputDecay, inputNumModels) {
avgNnetFit<-avNNet(trainingData, solTrainY, size = inputNumHiddenNodes, decay = inputDecay, repeats = inputNumModels,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = inputNumHiddenNodes * (ncol(trainingData) + 1) + inputNumHiddenNodes + 1)
avgNnetPred<-predict(avgNnetFit, testingData)
avgNnetSummary<-defaultSummary(data.frame(obs=solTestY, pred=nnetPred1))
avgNnetRMSE<-nnetSummary[1]
avgNnetRSquared<-nnetSummary[2]
}
nnSingle(5,0.01)
nnSingle<-function(inputNumHiddenNodes, inputDecay) {
singleNnetFit<-nnet(trainingData, solTrainY, size = inputNumHiddenNodes, decay = inputDecay,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = inputNumHiddenNodes * (ncol(trainingData) + 1) + inputNumHiddenNodes + 1)
singleNnetPred<-predict(singleNnetFit, testingData)
singleNnetSummary<-defaultSummary(data.frame(obs=solTestY, pred=singleNnetPred))
singleNnetRMSE<- singleNnetSummary[1]
singleNnetRSquared<-singleNnetSummary[2]
}
nnSingle(5,0.01)
nnSingle<-function(inputNumHiddenNodes, inputDecay) {
singleNnetFit<-nnet(trainingData, solTrainY, size = inputNumHiddenNodes, decay = inputDecay,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = inputNumHiddenNodes * (ncol(trainingData) + 1) + inputNumHiddenNodes + 1)
singleNnetPred<-predict(singleNnetFit, testingData)
singleNnetSummary<-defaultSummary(data.frame(obs=solTestY, pred=singleNnetPred))
singleNnetSummary
}
nnAverage<-function(inputNumHiddenNodes, inputDecay, inputNumModels) {
avgNnetFit<-avNNet(trainingData, solTrainY, size = inputNumHiddenNodes, decay = inputDecay, repeats = inputNumModels,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = inputNumHiddenNodes * (ncol(trainingData) + 1) + inputNumHiddenNodes + 1)
avgNnetPred<-predict(avgNnetFit, testingData)
avgNnetSummary<-defaultSummary(data.frame(obs=solTestY, pred=nnetPred1))
avgNnetSummary
}
nnSingle(5,0.01)
singleNnetSummary<-nnSingle(5,0.01)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
singleNnetSummary<-nnSingle(trainingDatacorrelated<-findCorrelation(cor(solTrainXtrans),cutoff=.75)
trainingData<-solTrainXtrans[,-correlated]
testingData<-solTestXtrans[, -correlated]
#call the linear function during initialization, it isn't dynamic
lmSummary<-linear(trainingData, testingData)
, testingData, input$numHiddenNodes, input$inputDecay)
correlated<-findCorrelation(cor(solTrainXtrans),cutoff=.75)
trainingData<-solTrainXtrans[,-correlated]
testingData<-solTestXtrans[, -correlated]
#call the linear function during initialization, it isn't dynamic
lmSummary<-linear(trainingData, testingData)
# get the RMSE and Rsquared for an lm model of the box-cox transformed parameters
# these are the baseline values against which the nnet model will be evaluated
linear<-function(trainingData, testingData) {
lmTrainingData<-trainingData
lmTrainingData$Solubility<-solTrainY
lmFit<-lm(Solubility ~ .,data = lmTrainingData)
lmPred<-predict(lmFit, testingData)
lmSummary<-defaultSummary(data.frame(obs=solTestY, pred=lmPred))
lmSummary
}
correlated<-findCorrelation(cor(solTrainXtrans),cutoff=.75)
trainingData<-solTrainXtrans[,-correlated]
testingData<-solTestXtrans[, -correlated]
#call the linear function during initialization, it isn't dynamic
lmSummary<-linear(trainingData, testingData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(AppliedPredictiveModeling)
data(solubility)
library(shiny)
library(caret)
library(nnet)
#remove correlated predictors
correlated<-findCorrelation(cor(solTrainXtrans),cutoff=.75)
trainingData<-solTrainXtrans[,-correlated]
testingData<-solTestXtrans[, -correlated]
lmTrainingData<-trainingData
lmTrainingData$Solubility<-solTrainY
# calculate the lm model since it is static
lmFit<-lm(Solubility ~ .,data = lmTrainingData)
lmPred<-predict(lmFit, testingData)
lmSummary<-defaultSummary(data.frame(obs=solTestY, pred=lmPred))
singleNnetFit<-reactive({nnet(trainingData, solTrainY, size = input$numHiddenNodes, decay = input$inputDecay,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = input$numHiddenNodes * (ncol(trainingData) + 1) + input$numHiddenNodes + 1)})
singleNnetPred<-reactive({predict(singleNnetFit(), testingData)})
singleNnetSummary<-reactive({defaultSummary(data.frame(obs=solTestY, pred=singleNnetPred()))})
averageNnetFit<-reactive({avNNet(trainingData, solTrainY, size = input$numHiddenNodes, decay = input$inputDecay, repeats = input$numModels,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = input$numHiddenNodes * (ncol(trainingData) + 1) + input$numHiddenNodes + 1)})
averageNnetPred<-reactive({predict(averageNnetFit(), testingData)})
averageNnetSummary<-reactive({defaultSummary(data.frame(obs=solTestY, pred=averageNnetPred()))})
output$lmRMSE <- renderPrint({lmSummary[1]})
output$lmRSquared <- renderPrint({lmSummary[2]})
output$singleNnetRMSE <- renderPrint({as.data.frame(singleNnetSummary())[1,1]})
output$singleNnetRSquared <- renderPrint({as.data.frame(singleNnetSummary())[2,1]})
output$averageNnetRMSE <- renderPrint({as.data.frame(averageNnetSummary())[1,1]})
output$averageNnetRSquared <- renderPrint({as.data.frame(averageNnetSummary())[2,1]})
output$lmResids<- renderPlot({plot(resid(lmFit))})
output$singleNnetResids<- renderPlot({plot(resid(singleNnetFit(),xlim=0:1000))})
output$averageNnetResids<- renderPlot({plot(resid(averageNnetFit(),xlim=0:1000))})
plot(resid(averageNnetFit(),xlim=0:1000))
testFit<-avNNet(trainingData, solTrainY, size = 5, decay = 0.01, repeats = 5,
linout = TRUE, trace = FALSE, maxit = 500,
MaxNWts = 5 * (ncol(trainingData) + 1) + 5 + 1)
plot(resid(testFit))
resid(testFit)
testFit
pred1<-predict(testFit,testingData)
resids<-pred1-solTestY
resids
plot(resids)
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='costab06',
token='30FB7674341B9DE4EE37875014C66685',
secret='pyJE6JDIQejB+VWadJ0Iv3ttEzxQYg5szoDgFVE3')
shinyapps::setAccountInfo(name='costab06',
token='30FB7674341B9DE4EE37875014C66685',
secret='pyJE6JDIQejB+VWadJ0Iv3ttEzxQYg5szoDgFVE3')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/rsconnect')
install.packages("digest")
install.packages("digest")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='costab06',
token='30FB7674341B9DE4EE37875014C66685',
secret='pyJE6JDIQejB+VWadJ0Iv3ttEzxQYg5szoDgFVE3')
library(shinyapps)
shinyapps::deployApp('/Users/Brian/git/DevDataProds')
install.github('slidify','ramnathv')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
getwd
getwd()
setwd("PitchDeck")
author("PitchDeck")
slidify("index.Rmd")
library(kniter)
library(knitr)
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
summary(trainingData)
ncol(trainingData)
nrow(trainingData)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
